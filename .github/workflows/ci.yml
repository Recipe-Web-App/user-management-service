---
name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.8.3"

jobs:
  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run pre-commit hooks
        run: |
          poetry run pre-commit run --all-files

      - name: Run type checking
        run: |
          poetry run mypy app/

      - name: Run security scanning
        run: |
          poetry run bandit -r app/ -f json -o bandit-report.json
          poetry run bandit -r app/

      - name: Check for vulnerabilities in dependencies
        run: |
          poetry run safety check

  test:
    name: Test Suite
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      # Test environment variables
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_DB: test_db
      POSTGRES_SCHEMA: public
      USER_MANAGEMENT_DB_USER: test_user
      USER_MANAGEMENT_DB_PASSWORD: test_password
      JWT_SECRET_KEY: test_secret_key_very_long_and_secure
      JWT_SIGNING_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 7
      PASSWORD_RESET_TOKEN_EXPIRE_MINUTES: 15
      ALLOWED_ORIGIN_HOSTS: http://localhost:3000,http://localhost:8080
      ALLOWED_CREDENTIALS: true
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB: 0

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Wait for services
        run: |
          sleep 10

      - name: Run unit tests
        run: |
          poetry run pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html

      - name: Run component tests
        run: |
          poetry run pytest tests/component/ -v --cov=app --cov-append --cov-report=xml --cov-report=html

      - name: Run performance tests
        run: |
          poetry run pytest tests/performance/ -v -m "not slow"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            htmlcov/
            coverage.xml

  security:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run Bandit security scan
        run: |
          poetry run bandit -r app/ -f json -o bandit-report.json || true
          poetry run bandit -r app/

      - name: Run safety check
        run: |
          poetry run safety check --json --output safety-report.json || true
          poetry run safety check

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: user-management-service:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm user-management-service:latest --help

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security, build]
    if: always()

    steps:
      - name: Notify on success
        if: >-
          ${{ needs.lint-and-format.result == 'success' &&
              needs.test.result == 'success' &&
              needs.security.result == 'success' &&
              needs.build.result == 'success' }}
        run: |
          echo "✅ All CI checks passed successfully!"

      - name: Notify on failure
        if: >-
          ${{ needs.lint-and-format.result == 'failure' ||
              needs.test.result == 'failure' ||
              needs.security.result == 'failure' ||
              needs.build.result == 'failure' }}
        run: |
          echo "❌ One or more CI checks failed!"
          exit 1
