# User Management Service - Development Makefile

.PHONY: help install dev test clean lint format security docker-up docker-down

# Default target
help:
	@echo "User Management Service - Available Commands:"
	@echo "  install      - Install all dependencies"
	@echo "  dev          - Run development server"
	@echo "  test         - Run all tests"
	@echo "  test-unit    - Run unit tests only"
	@echo "  test-comp    - Run component tests only"
	@echo "  test-perf    - Run performance tests"
	@echo "  coverage     - Run tests with coverage report"
	@echo "  lint         - Run all linting and code quality checks"
	@echo "  format       - Format code with black and ruff"
	@echo "  security     - Run security scans"
	@echo "  docker-up    - Start development services with Docker"
	@echo "  docker-down  - Stop development services"
	@echo "  docker-logs  - View Docker service logs"
	@echo "  clean        - Clean up cache and temporary files"
	@echo "  docs         - Open API documentation"

# Installation
install:
	@echo "Installing dependencies..."
	poetry install
	poetry run pre-commit install

# Development
dev:
	@echo "Starting development server..."
	poetry run app-local

dev-reload:
	@echo "Starting development server with hot reload..."
	poetry run uvicorn app.main:app --host 127.0.0.1 --port 8000 --reload

# Testing
test:
	@echo "Running all tests..."
	poetry run pytest

test-unit:
	@echo "Running unit tests..."
	poetry run pytest tests/unit/ -v

test-comp:
	@echo "Running component tests..."
	poetry run pytest tests/component/ -v

test-perf:
	@echo "Running performance tests..."
	poetry run pytest tests/performance/ -v -m "not slow"

coverage:
	@echo "Running tests with coverage..."
	poetry run pytest --cov=app --cov-report=html --cov-report=term
	@echo "Coverage report generated in htmlcov/"

# Code Quality
lint:
	@echo "Running code quality checks..."
	poetry run pre-commit run --all-files

format:
	@echo "Formatting code..."
	poetry run black .
	poetry run ruff check . --fix
	poetry run isort .

type-check:
	@echo "Running type checking..."
	poetry run mypy app/

security:
	@echo "Running security scans..."
	poetry run bandit -r app/
	poetry run safety check

# Docker Development
docker-up:
	@echo "Starting development services..."
	docker-compose up -d postgres redis
	@echo "Services started. Waiting for readiness..."
	@sleep 10
	@echo "Services should be ready!"

docker-up-all:
	@echo "Starting all services including admin tools..."
	docker-compose --profile admin up -d

docker-down:
	@echo "Stopping development services..."
	docker-compose down

docker-logs:
	@echo "Showing Docker service logs..."
	docker-compose logs -f

docker-clean:
	@echo "Cleaning up Docker resources..."
	docker-compose down -v
	docker system prune -f

# Documentation
docs:
	@echo "Opening API documentation..."
	@sleep 2 && open http://localhost:8000/docs &
	poetry run app-local

docs-build:
	@echo "Building documentation..."
	@echo "Documentation is auto-generated by FastAPI at /docs"

# Database
db-reset:
	@echo "Resetting development database..."
	docker-compose down postgres
	docker volume rm user-management-service_postgres_data 2>/dev/null || true
	docker-compose up -d postgres
	@echo "Database reset complete!"

db-shell:
	@echo "Connecting to database..."
	docker exec -it user-management-postgres psql -U user_management -d recipe_manager

redis-shell:
	@echo "Connecting to Redis..."
	docker exec -it user-management-redis redis-cli -a dev_redis_password

# Utilities
clean:
	@echo "Cleaning up cache and temporary files..."
	find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name .pytest_cache -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name .mypy_cache -exec rm -rf {} + 2>/dev/null || true
	find . -type d -name .ruff_cache -exec rm -rf {} + 2>/dev/null || true
	rm -rf htmlcov/ .coverage coverage.xml 2>/dev/null || true
	@echo "Cleanup complete!"

setup: install docker-up
	@echo "Complete development setup finished!"
	@echo "You can now run 'make dev' to start the development server"

quick-test: lint test-unit
	@echo "Quick test suite completed!"

full-test: lint test coverage
	@echo "Full test suite completed!"

# CI/CD helpers
ci-test:
	@echo "Running CI test suite..."
	poetry run pytest --cov=app --cov-report=xml --cov-fail-under=90

ci-quality:
	@echo "Running CI quality checks..."
	poetry run pre-commit run --all-files

# Environment setup
env-copy:
	@echo "Copying environment template..."
	cp .env.example .env
	@echo "Please edit .env with your configuration"

# Health checks
health:
	@echo "Checking service health..."
	curl -f http://localhost:8000/api/v1/health || echo "Service not running"

health-detailed:
	@echo "Checking detailed service health..."
	curl -f http://localhost:8000/api/v1/health/detailed || echo "Service not running"

# Performance testing
perf-test:
	@echo "Running performance tests..."
	poetry run pytest tests/performance/ -v --tb=short

load-test:
	@echo "Running load tests (including slow tests)..."
	poetry run pytest tests/performance/ -v -m "slow" --tb=short

# Development helpers
watch:
	@echo "Watching for file changes..."
	poetry run watchdog tricks.yaml

shell:
	@echo "Starting Python shell with app context..."
	poetry run python -i -c "from app.main import app; from app.core.config import settings"
