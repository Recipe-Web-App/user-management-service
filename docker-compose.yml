---
version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: user-management-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: recipe_manager
      POSTGRES_USER: user_management
      POSTGRES_PASSWORD: ${USER_MANAGEMENT_DB_PASSWORD:-dev_password_123}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - user-management-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_management -d recipe_manager"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: user-management-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-dev_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - user-management-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # User Management Service
  user-management-service:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: user-management-service
    restart: unless-stopped
    environment:
      # Database Configuration
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: recipe_manager
      POSTGRES_SCHEMA: public
      USER_MANAGEMENT_DB_USER: user_management
      USER_MANAGEMENT_DB_PASSWORD: ${USER_MANAGEMENT_DB_PASSWORD:-dev_password_123}

      # JWT Configuration
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-dev_jwt_secret_key_very_long_and_secure_for_development_only}
      JWT_SIGNING_ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 7
      PASSWORD_RESET_TOKEN_EXPIRE_MINUTES: 15

      # CORS Configuration
      ALLOWED_ORIGIN_HOSTS: "http://localhost:3000,http://localhost:8080,http://127.0.0.1:3000"
      ALLOWED_CREDENTIALS: "true"

      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-dev_redis_password}
      REDIS_DB: 0

      # Development settings
      ENVIRONMENT: development
    volumes:
      - ./app:/app/app:ro
      - ./tests:/app/tests:ro
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - user-management-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Administration (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: user-management-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@recipe-app.local
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin_password}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - user-management-network
    depends_on:
      - postgres
    profiles:
      - admin

  # Redis Commander (Redis Administration)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: user-management-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-dev_redis_password}
      HTTP_USER: admin
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin_password}
    ports:
      - "8081:8081"
    networks:
      - user-management-network
    depends_on:
      - redis
    profiles:
      - admin

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  user-management-network:
    driver: bridge
    name: user-management-network
