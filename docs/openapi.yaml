---
openapi: 3.0.0
info:
  title: User Management Service API
  description: |
    A comprehensive user management microservice providing authentication, profile management,
    social features, notifications, and administrative capabilities for a recipe web application.

    ## Features
    - User registration and authentication (JWT-based)
    - Profile management with privacy controls
    - Social features (following/followers)
    - Notification system with preferences
    - Administrative tools and metrics
    - Health monitoring endpoints

    ## Authentication

    This service uses **OAuth2 authentication** provided by an external OAuth2 service:

    - **Authorization Code Flow with PKCE** for web/mobile applications
    - **Client Credentials Flow** for service-to-service communication
    - **Scope-based authorization** with granular permissions
    - **Token introspection** and validation handled externally

    Include tokens in the Authorization header: `Authorization: Bearer <token>`

    **Note**: User registration, login, and password reset are handled by the external OAuth2 service, not by this API.

    ## Available OAuth2 Scopes
    - `openid` - Basic user identification (required)
    - `profile` - User profile information
    - `user:read` - Read user data and profiles
    - `user:write` - Create and update user data
    - `admin` - Administrative operations
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8000/api/v1
    description: Development server
  - url: https://api.example.com/api/v1
    description: Production server

security:
  - HTTPBearer: []

tags:
  - name: users
    description: User profile and account operations
  - name: social
    description: Social features including following and activity
  - name: notifications
    description: Notification management and preferences
  - name: admin
    description: Administrative operations (requires admin role)
  - name: metrics
    description: System metrics and monitoring (requires admin role)
  - name: health
    description: Service health checks

paths:
  # Note: Authentication endpoints are handled by external OAuth2 service
  # This service only provides user management functionality

  # User Management Endpoints
  /user-management/users/{user_id}/profile:
    get:
      tags:
        - users
      summary: Get user profile
      description: Retrieve user profile information with privacy checks
      parameters:
        - $ref: "#/components/parameters/UserIdPath"
      responses:
        "200":
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /user-management/users/profile:
    put:
      tags:
        - users
      summary: Update user profile
      description: Update current user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfileUpdateRequest"
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /user-management/users/account/delete-request:
    post:
      tags:
        - users
      summary: Request account deletion
      description: Request account deletion and receive a confirmation token
      responses:
        "200":
          description: Deletion request created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAccountDeleteRequestResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /user-management/users/account:
    delete:
      tags:
        - users
      summary: Confirm account deletion
      description: Confirm account deletion using the confirmation token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAccountDeleteRequest"
      responses:
        "200":
          description: Account successfully deactivated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserConfirmAccountDeleteResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /user-management/users/search:
    get:
      tags:
        - users
      summary: Search users
      description: Search for users by username or display name
      parameters:
        - name: query
          in: query
          description: Search query for username or display name
          schema:
            type: string
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/CountOnlyParam"
      responses:
        "200":
          description: User search results retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSearchResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /user-management/users/{user_id}:
    get:
      tags:
        - users
      summary: Get user by ID
      description: >-
        Retrieve public profile of another user. Respects privacy settings -
        private profiles may not be accessible to anonymous users or other users
        depending on their privacy preferences.
      parameters:
        - $ref: "#/components/parameters/UserIdPath"
      responses:
        "200":
          description: Public user profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserSearchResult"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  # Social Features Endpoints
  /user-management/users/{user_id}/following:
    get:
      tags:
        - social
      summary: Get following list
      description: Retrieve list of users the specified user is following
      parameters:
        - $ref: "#/components/parameters/UserIdPath"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/CountOnlyParam"
      responses:
        "200":
          description: Following list retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFollowedUsersResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /user-management/users/{user_id}/followers:
    get:
      tags:
        - social
      summary: Get followers list
      description: Retrieve list of users following the current user
      parameters:
        - $ref: "#/components/parameters/UserIdPath"
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/CountOnlyParam"
      responses:
        "200":
          description: Followers list retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetFollowedUsersResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /user-management/users/{user_id}/follow/{target_user_id}:
    post:
      tags:
        - social
      summary: Follow user
      description: Follow another user
      parameters:
        - $ref: "#/components/parameters/UserIdPath"
        - name: target_user_id
          in: path
          required: true
          description: Target user ID to follow
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully followed user or already following
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FollowResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

    delete:
      tags:
        - social
      summary: Unfollow user
      description: Unfollow another user
      parameters:
        - $ref: "#/components/parameters/UserIdPath"
        - name: target_user_id
          in: path
          required: true
          description: Target user ID to unfollow
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully unfollowed user or not following
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FollowResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /user-management/users/{user_id}/activity:
    get:
      tags:
        - social
      summary: Get user activity
      description: Retrieve activity from a specific user (recipes, follows, reviews, favorites)
      parameters:
        - $ref: "#/components/parameters/UserIdPath"
        - name: per_type_limit
          in: query
          description: Number of results to return per activity type
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 15
      responses:
        "200":
          description: User activity data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserActivityResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  # Notification Endpoints
  /user-management/notifications:
    get:
      tags:
        - notifications
      summary: Get notifications
      description: Retrieve user's notifications
      parameters:
        - $ref: "#/components/parameters/LimitParam"
        - $ref: "#/components/parameters/OffsetParam"
        - $ref: "#/components/parameters/CountOnlyParam"
      responses:
        "200":
          description: Notifications retrieved successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/NotificationListResponse"
                  - $ref: "#/components/schemas/NotificationCountResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

    delete:
      tags:
        - notifications
      summary: Delete notifications
      description: Delete multiple notifications
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationDeleteRequest"
      responses:
        "200":
          description: All notifications deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationDeleteResponse"
        "206":
          description: Partial success - some notifications deleted, others not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationDeleteResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /user-management/notifications/{notification_id}/read:
    put:
      tags:
        - notifications
      summary: Mark notification as read
      description: Mark a notification as read
      parameters:
        - name: notification_id
          in: path
          required: true
          description: Notification ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Notification marked as read successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationReadResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /user-management/notifications/read-all:
    put:
      tags:
        - notifications
      summary: Mark all notifications as read
      description: Mark all notifications as read
      responses:
        "200":
          description: All notifications marked as read successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationReadAllResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /user-management/notifications/preferences:
    get:
      tags:
        - notifications
      summary: Get notification preferences
      description: Retrieve user's notification preferences
      responses:
        "200":
          description: Notification preferences retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPreferenceResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

    put:
      tags:
        - notifications
      summary: Update notification preferences
      description: Update user's notification preferences
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserPreferenceRequest"
      responses:
        "200":
          description: Notification preferences updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPreferenceResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/ValidationError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  # Admin Endpoints
  /user-management/admin/redis/session-stats:
    get:
      tags:
        - admin
      summary: Get Redis session stats
      description: Return Redis session statistics
      responses:
        "200":
          description: Session stats returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RedisSessionStatsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /user-management/admin/users/stats:
    get:
      tags:
        - admin
      summary: Get user statistics
      description: Return user statistics
      responses:
        "200":
          description: User stats returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserStatsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /user-management/admin/health:
    get:
      tags:
        - admin
      summary: System health check
      description: Return system health status
      responses:
        "200":
          description: System health returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemHealthResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /user-management/admin/users/{user_id}/force-logout:
    post:
      tags:
        - admin
      summary: Force logout user
      description: Force logout a user
      parameters:
        - $ref: "#/components/parameters/UserIdPath"
      responses:
        "200":
          description: User force-logout triggered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForceLogoutResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /user-management/admin/redis/sessions:
    delete:
      tags:
        - admin
      summary: Clear all Redis sessions
      description: Clear all Redis sessions
      responses:
        "200":
          description: All sessions cleared
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClearSessionsResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # Metrics Endpoints
  /user-management/metrics/performance:
    get:
      tags:
        - metrics
      summary: Get performance metrics
      description: Get application performance metrics (requires admin authentication)
      responses:
        "200":
          description: Performance metrics retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PerformanceMetrics"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /user-management/metrics/cache:
    get:
      tags:
        - metrics
      summary: Get cache metrics
      description: Get cache performance metrics (requires admin authentication)
      responses:
        "200":
          description: Cache metrics retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CacheMetrics"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /user-management/metrics/cache/clear:
    post:
      tags:
        - metrics
      summary: Clear cache entries
      description: Clear cache entries matching a pattern (requires admin authentication)
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                pattern:
                  type: string
                  default: "*"
                  description: Redis pattern for keys to clear
      responses:
        "200":
          description: Cache cleared successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CacheClearResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /user-management/metrics/system:
    get:
      tags:
        - metrics
      summary: Get system metrics
      description: Get system resource metrics (requires admin authentication)
      responses:
        "200":
          description: System metrics retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemMetrics"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  /user-management/metrics/health/detailed:
    get:
      tags:
        - metrics
      summary: Get detailed health metrics
      description: Get detailed health metrics for all services (requires admin authentication)
      responses:
        "200":
          description: Detailed health metrics retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DetailedHealthMetrics"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"

  # Health Check Endpoints
  /user-management/health:
    get:
      tags:
        - health
      summary: Readiness check
      description: |
        Returns a 200 OK response if the server is ready to serve requests.
        Returns degraded status (200) when database is down but Redis is healthy.
        Returns 503 only when Redis is unavailable since JWT sessions are critical.
      security: []
      responses:
        "200":
          description: Service is ready
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadinessResponse"
        "503":
          description: Service unavailable (Redis is down)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReadinessResponse"

  /user-management/live:
    get:
      tags:
        - health
      summary: Liveness check
      description: Returns a 200 OK response indicating the server is alive
      security: []
      responses:
        "200":
          description: Service is alive
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LivenessResponse"

components:
  securitySchemes:
    HTTPBearer:
      type: http
      scheme: bearer
      description: |
        Bearer token authentication using OAuth2 tokens.

        Include the token in the Authorization header: `Authorization: Bearer <token>`

        **Note**: Tokens are issued and validated by an external OAuth2 service.
        This service accepts valid Bearer tokens for authentication.

  parameters:
    UserIdPath:
      name: user_id
      in: path
      required: true
      description: User ID
      schema:
        type: string
        format: uuid

    LimitParam:
      name: limit
      in: query
      description: Number of results to return
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    OffsetParam:
      name: offset
      in: query
      description: Number of results to skip
      schema:
        type: integer
        minimum: 0
        default: 0

    CountOnlyParam:
      name: count_only
      in: query
      description: Return only the count of results
      schema:
        type: boolean
        default: false

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    Unauthorized:
      description: Invalid or missing authorization token
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    Forbidden:
      description: Access forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    InsufficientScope:
      description: Insufficient OAuth2 Scope
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OAuth2ScopeError"
          examples:
            missing_write_scope:
              summary: Missing write scope
              value:
                detail: "Missing required scope: user:write"
                error_code: "INSUFFICIENT_SCOPE"
                required_scopes: ["user:write"]
                available_scopes: ["user:read", "profile"]
            missing_admin_scope:
              summary: Missing admin scope
              value:
                detail: "Missing required scope: admin"
                error_code: "INSUFFICIENT_SCOPE"
                required_scopes: ["admin"]
                available_scopes: ["user:read", "user:write", "profile"]

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    ServiceUnavailable:
      description: Service temporarily unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  schemas:
    # Error Response
    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
          description: Error type or category
          example: validation_error
        message:
          type: string
          description: Human-readable error message
          example: Invalid input data
        details:
          type: object
          description: Additional error details or context
          additionalProperties: true

    # User Management Schemas
    User:
      type: object
      required:
        - userId
        - username
        - isActive
        - createdAt
        - updatedAt
      properties:
        userId:
          type: string
          format: uuid
          description: Unique identifier for the user
        username:
          type: string
          minLength: 1
          maxLength: 50
          description: Username for the user account
        email:
          type: string
          format: email
          nullable: true
          description: Email address for the user account
        fullName:
          type: string
          maxLength: 100
          nullable: true
          description: Full name of the user
        bio:
          type: string
          maxLength: 500
          nullable: true
          description: User's biography or description
        isActive:
          type: boolean
          description: Whether the user account is active
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user account was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user account was last updated

    UserSearchResult:
      type: object
      required:
        - userId
        - username
        - isActive
        - createdAt
        - updatedAt
      properties:
        userId:
          type: string
          format: uuid
          description: Unique identifier for the user
        username:
          type: string
          description: Username for the user account
        fullName:
          type: string
          nullable: true
          description: Full name of the user
        isActive:
          type: boolean
          description: Whether the user account is active
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user account was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user account was last updated

    UserProfileResponse:
      type: object
      required:
        - userId
        - username
        - isActive
        - createdAt
        - updatedAt
      properties:
        userId:
          type: string
          format: uuid
          description: Unique identifier for the user
        username:
          type: string
          description: Username for the user account
        email:
          type: string
          format: email
          nullable: true
          description: Email address (only included if contact info is visible to requester)
        fullName:
          type: string
          nullable: true
          description: Full name of the user
        bio:
          type: string
          nullable: true
          description: User's biography or description
        isActive:
          type: boolean
          description: Whether the user account is active
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the user account was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the user account was last updated

    UserProfileUpdateRequest:
      type: object
      properties:
        username:
          type: string
          nullable: true
          minLength: 3
          maxLength: 50
          pattern: "^[a-zA-Z0-9_]+$"
          description: Unique username (3-50 characters, alphanumeric and underscore only)
        email:
          type: string
          format: email
          nullable: true
          description: Valid email address
        fullName:
          type: string
          maxLength: 255
          nullable: true
          description: User's full name (max 255 characters)
        bio:
          type: string
          maxLength: 1000
          nullable: true
          description: User's bio/description (max 1000 characters)

    UserAccountDeleteRequest:
      type: object
      required:
        - confirmationToken
      properties:
        confirmationToken:
          type: string
          minLength: 1
          description: Confirmation token received from delete request

    UserAccountDeleteRequestResponse:
      type: object
      required:
        - userId
        - confirmationToken
        - expiresAt
      properties:
        userId:
          type: string
          format: uuid
          description: User ID
        confirmationToken:
          type: string
          description: Confirmation token for deletion
        expiresAt:
          type: string
          format: date-time
          description: Token expiration time

    UserConfirmAccountDeleteResponse:
      type: object
      required:
        - userId
        - deactivatedAt
      properties:
        userId:
          type: string
          format: uuid
          description: User ID
        deactivatedAt:
          type: string
          format: date-time
          description: Account deactivation time

    UserSearchResponse:
      type: object
      required:
        - results
        - totalCount
        - limit
        - offset
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/UserSearchResult"
          description: List of users matching the search query
        totalCount:
          type: integer
          description: Total number of users matching the search query
        limit:
          type: integer
          description: Number of results returned
        offset:
          type: integer
          description: Number of results skipped

    # Social Features Schemas
    GetFollowedUsersResponse:
      type: object
      required:
        - totalCount
      properties:
        totalCount:
          type: integer
          description: Total number of users being followed
        followedUsers:
          type: array
          items:
            $ref: "#/components/schemas/User"
          nullable: true
          description: List of users being followed (null when count_only=true)
        limit:
          type: integer
          nullable: true
          description: Number of results returned (null when count_only=true)
        offset:
          type: integer
          nullable: true
          description: Number of results skipped (null when count_only=true)

    FollowResponse:
      type: object
      required:
        - message
        - isFollowing
      properties:
        message:
          type: string
          description: Success message for the follow/unfollow action
        isFollowing:
          type: boolean
          description: Whether the user is now following the target user

    UserActivityResponse:
      type: object
      required:
        - userId
        - recentRecipes
        - recentFollows
        - recentReviews
        - recentFavorites
      properties:
        userId:
          type: string
          format: uuid
          description: Unique identifier for the user
        recentRecipes:
          type: array
          items:
            $ref: "#/components/schemas/RecipeSummary"
          description: List of recently created recipes
        recentFollows:
          type: array
          items:
            $ref: "#/components/schemas/UserSummary"
          description: List of recently followed users
        recentReviews:
          type: array
          items:
            $ref: "#/components/schemas/ReviewSummary"
          description: List of recent reviews written by the user
        recentFavorites:
          type: array
          items:
            $ref: "#/components/schemas/FavoriteSummary"
          description: List of recently favorited recipes

    RecipeSummary:
      type: object
      required:
        - recipeId
        - title
        - createdAt
      properties:
        recipeId:
          type: integer
          description: Unique identifier for the recipe
        title:
          type: string
          description: Title of the recipe
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the recipe was created

    UserSummary:
      type: object
      required:
        - userId
        - username
        - followedAt
      properties:
        userId:
          type: string
          format: uuid
          description: Unique identifier for the user
        username:
          type: string
          description: Username of the followed user
        followedAt:
          type: string
          format: date-time
          description: Timestamp when the user was followed

    ReviewSummary:
      type: object
      required:
        - reviewId
        - recipeId
        - rating
        - createdAt
      properties:
        reviewId:
          type: integer
          description: Unique identifier for the review
        recipeId:
          type: integer
          description: Unique identifier for the reviewed recipe
        rating:
          type: number
          description: Rating given in the review
        comment:
          type: string
          nullable: true
          description: Optional comment for the review
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the review was created

    FavoriteSummary:
      type: object
      required:
        - recipeId
        - title
        - favoritedAt
      properties:
        recipeId:
          type: integer
          description: Unique identifier for the favorited recipe
        title:
          type: string
          description: Title of the favorited recipe
        favoritedAt:
          type: string
          format: date-time
          description: Timestamp when the recipe was favorited

    # Notification Schemas
    Notification:
      type: object
      required:
        - notificationId
        - userId
        - title
        - message
        - notificationType
        - isRead
        - isDeleted
        - createdAt
        - updatedAt
      properties:
        notificationId:
          type: string
          format: uuid
          description: Unique identifier for the notification
        userId:
          type: string
          format: uuid
          description: User ID who owns this notification
        title:
          type: string
          maxLength: 255
          description: Notification title
        message:
          type: string
          description: Notification message content
        notificationType:
          type: string
          maxLength: 50
          description: Type of notification
        isRead:
          type: boolean
          description: Whether the notification has been read
        isDeleted:
          type: boolean
          description: Whether the notification has been deleted
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the notification was created
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the notification was last updated

    NotificationListResponse:
      type: object
      required:
        - notifications
        - totalCount
        - limit
        - offset
      properties:
        notifications:
          type: array
          items:
            $ref: "#/components/schemas/Notification"
          description: List of notifications
        totalCount:
          type: integer
          description: Total number of notifications
        limit:
          type: integer
          description: Number of results returned
        offset:
          type: integer
          description: Number of results skipped

    NotificationCountResponse:
      type: object
      required:
        - totalCount
      properties:
        totalCount:
          type: integer
          description: Total number of notifications

    NotificationReadResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Success message
          example: Notification marked as read successfully

    NotificationReadAllResponse:
      type: object
      required:
        - message
        - readNotificationIds
      properties:
        message:
          type: string
          description: Success message
          example: All notifications marked as read successfully
        readNotificationIds:
          type: array
          items:
            type: string
            format: uuid
          description: List of notification IDs that were marked as read

    NotificationDeleteRequest:
      type: object
      required:
        - notificationIds
      properties:
        notificationIds:
          type: array
          items:
            type: string
            format: uuid
          minItems: 1
          maxItems: 100
          description: List of notification IDs to delete

    NotificationDeleteResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message
          example: Notifications deleted successfully
        deleted_notification_ids:
          type: array
          items:
            type: string
            format: uuid
          description: List of notification IDs that were successfully deleted

    # User Preferences Schemas
    UserPreferences:
      type: object
      properties:
        notification_preferences:
          $ref: "#/components/schemas/NotificationPreferences"
        privacy_preferences:
          $ref: "#/components/schemas/PrivacyPreferences"
        display_preferences:
          $ref: "#/components/schemas/DisplayPreferences"

    UserPreferenceResponse:
      type: object
      properties:
        preferences:
          $ref: "#/components/schemas/UserPreferences"

    UpdateUserPreferenceRequest:
      type: object
      properties:
        notification_preferences:
          $ref: "#/components/schemas/NotificationPreferences"
        privacy_preferences:
          $ref: "#/components/schemas/PrivacyPreferences"
        display_preferences:
          $ref: "#/components/schemas/DisplayPreferences"

    NotificationPreferences:
      type: object
      properties:
        email_notifications:
          type: boolean
          default: true
        push_notifications:
          type: boolean
          default: true
        follow_notifications:
          type: boolean
          default: true
        like_notifications:
          type: boolean
          default: true
        comment_notifications:
          type: boolean
          default: true
        recipe_notifications:
          type: boolean
          default: true
        system_notifications:
          type: boolean
          default: true

    PrivacyPreferences:
      type: object
      properties:
        profile_visibility:
          type: string
          enum: [public, followers_only, private]
          default: public
        show_email:
          type: boolean
          default: false
        show_full_name:
          type: boolean
          default: true
        allow_follows:
          type: boolean
          default: true
        allow_messages:
          type: boolean
          default: true

    DisplayPreferences:
      type: object
      properties:
        theme:
          type: string
          enum: [light, dark, auto]
          default: auto
        language:
          type: string
          default: en
        timezone:
          type: string
          default: UTC

    # Admin Schemas
    RedisSessionStatsResponse:
      type: object
      properties:
        total_sessions:
          type: integer
        active_sessions:
          type: integer
        memory_usage:
          type: string
        ttl_info:
          type: object
          additionalProperties: true

    UserStatsResponse:
      type: object
      properties:
        total_users:
          type: integer
        active_users:
          type: integer
        inactive_users:
          type: integer
        new_users_today:
          type: integer
        new_users_this_week:
          type: integer
        new_users_this_month:
          type: integer

    SystemHealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        database_status:
          type: string
          enum: [healthy, unhealthy]
        redis_status:
          type: string
          enum: [healthy, unhealthy]
        uptime_seconds:
          type: integer
        version:
          type: string

    ForceLogoutResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
          example: User force-logout triggered
        sessions_cleared:
          type: integer

    ClearSessionsResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
          example: All sessions cleared
        sessions_cleared:
          type: integer

    # Metrics Schemas
    PerformanceMetrics:
      type: object
      properties:
        response_times:
          type: object
          properties:
            average_ms:
              type: number
            p50_ms:
              type: number
            p95_ms:
              type: number
            p99_ms:
              type: number
        request_counts:
          type: object
          properties:
            total_requests:
              type: integer
            requests_per_minute:
              type: integer
            active_sessions:
              type: integer
        error_rates:
          type: object
          properties:
            total_errors:
              type: integer
            error_rate_percent:
              type: number
            4xx_errors:
              type: integer
            5xx_errors:
              type: integer
        database:
          type: object
          properties:
            active_connections:
              type: integer
            max_connections:
              type: integer
            avg_query_time_ms:
              type: number
            slow_queries_count:
              type: integer

    CacheMetrics:
      type: object
      properties:
        memory_usage:
          type: string
        memory_usage_human:
          type: string
        keys_count:
          type: integer
        hit_rate:
          type: number
        connected_clients:
          type: integer
        evicted_keys:
          type: integer
        expired_keys:
          type: integer

    CacheClearResponse:
      type: object
      properties:
        message:
          type: string
          example: Cache cleared successfully
        pattern:
          type: string
        cleared_count:
          type: integer

    SystemMetrics:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        system:
          type: object
          properties:
            cpu_usage_percent:
              type: number
            memory_total_gb:
              type: number
            memory_used_gb:
              type: number
            memory_usage_percent:
              type: number
            disk_total_gb:
              type: number
            disk_used_gb:
              type: number
            disk_usage_percent:
              type: number
        process:
          type: object
          properties:
            memory_rss_mb:
              type: number
            memory_vms_mb:
              type: number
            cpu_percent:
              type: number
            num_threads:
              type: integer
            open_files:
              type: integer
        uptime_seconds:
          type: integer

    DetailedHealthMetrics:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        overall_status:
          type: string
          enum: [healthy, degraded, unhealthy]
        services:
          type: object
          properties:
            redis:
              type: object
              properties:
                status:
                  type: string
                  enum: [healthy, unhealthy]
                response_time_ms:
                  type: number
                memory_usage:
                  type: string
                connected_clients:
                  type: integer
                hit_rate_percent:
                  type: number
            database:
              type: object
              properties:
                status:
                  type: string
                  enum: [healthy, unhealthy]
                response_time_ms:
                  type: number
                active_connections:
                  type: integer
                max_connections:
                  type: integer
        application:
          type: object
          properties:
            version:
              type: string
            environment:
              type: string
            features:
              type: object
              properties:
                authentication:
                  type: string
                caching:
                  type: string
                monitoring:
                  type: string
                security_headers:
                  type: string

    # Health Check Schemas
    ReadinessResponse:
      type: object
      properties:
        ready:
          type: boolean
        status:
          type: string
          enum: [ready, degraded, not_ready]
        checks:
          type: object
          properties:
            app:
              $ref: "#/components/schemas/HealthCheck"
            database:
              $ref: "#/components/schemas/HealthCheck"
            redis:
              $ref: "#/components/schemas/HealthCheck"

    LivenessResponse:
      type: object
      properties:
        alive:
          type: boolean
        timestamp:
          type: string
          format: date-time

    HealthCheck:
      type: object
      properties:
        healthy:
          type: boolean
        message:
          type: string

    # OAuth2 Error Schemas
    OAuth2ScopeError:
      type: object
      required:
        - detail
        - error_code
        - required_scopes
      properties:
        detail:
          type: string
          description: Human-readable error message
          example: "Missing required scope: user:write"
        error_code:
          type: string
          description: Machine-readable error code
          example: "INSUFFICIENT_SCOPE"
        required_scopes:
          type: array
          items:
            type: string
          description: List of scopes required for this operation
          example: ["user:write"]
        available_scopes:
          type: array
          items:
            type: string
          description: List of scopes available in the current token
          example: ["user:read", "profile"]
